openapi: 3.0.3
info:
  title: Mayastor RESTful API
  version: v0
servers:
  - url: /v0
paths:
  /nexuses:
    get:
      tags:
        - Nexuses
      operationId: get_nexuses
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Nexus'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/nexuses/{nexus_id}':
    get:
      tags:
        - Nexuses
      operationId: get_nexus
      parameters:
        - in: path
          name: nexus_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Nexus'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
    delete:
      tags:
        - Nexuses
      operationId: del_nexus
      parameters:
        - in: path
          name: nexus_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: OK
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/nexuses/{nexus_id}/children':
    get:
      tags:
        - Children
      operationId: get_nexus_children
      parameters:
        - in: path
          name: nexus_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Child'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/nexuses/{nexus_id}/children/{child_id}':
    get:
      tags:
        - Children
      operationId: get_nexus_child
      parameters:
        - in: path
          name: nexus_id
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: child_id
          required: true
          schema:
            type: string
            format: url
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Child'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
    put:
      tags:
        - Children
      operationId: put_nexus_child
      parameters:
        - in: path
          name: nexus_id
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: child_id
          required: true
          schema:
            type: string
            format: url
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Child'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
    delete:
      tags:
        - Children
      operationId: del_nexus_child
      parameters:
        - in: path
          name: nexus_id
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: child_id
          required: true
          schema:
            type: string
            format: url
      responses:
        '204':
          description: OK
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  /nodes:
    get:
      tags:
        - Nodes
      operationId: get_nodes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Node'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/nodes/{id}':
    get:
      tags:
        - Nodes
      operationId: get_node
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/nodes/{id}/nexuses':
    get:
      tags:
        - Nexuses
      operationId: get_node_nexuses
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Nexus'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/nodes/{id}/pools':
    get:
      tags:
        - Pools
      operationId: get_node_pools
      parameters:
        - in: path
          name: id
          required: true
          schema:
            $ref: '#/components/schemas/NodeId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pool'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/nodes/{id}/replicas':
    get:
      tags:
        - Replicas
      operationId: get_node_replicas
      parameters:
        - in: path
          name: id
          required: true
          schema:
            $ref: '#/components/schemas/NodeId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Replica'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/nodes/{node_id}/nexuses/{nexus_id}':
    get:
      tags:
        - Nexuses
      operationId: get_node_nexus
      parameters:
        - in: path
          name: node_id
          required: true
          schema:
            $ref: '#/components/schemas/NodeId'
        - in: path
          name: nexus_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Nexus'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
    put:
      tags:
        - Nexuses
      operationId: put_node_nexus
      parameters:
        - in: path
          name: node_id
          required: true
          schema:
            $ref: '#/components/schemas/NodeId'
        - in: path
          name: nexus_id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNexusBody'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Nexus'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
    delete:
      tags:
        - Nexuses
      operationId: del_node_nexus
      parameters:
        - in: path
          name: node_id
          required: true
          schema:
            $ref: '#/components/schemas/NodeId'
        - in: path
          name: nexus_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: OK
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/nodes/{node_id}/nexuses/{nexus_id}/children':
    get:
      tags:
        - Children
      operationId: get_node_nexus_children
      parameters:
        - in: path
          name: node_id
          required: true
          schema:
            $ref: '#/components/schemas/NodeId'
        - in: path
          name: nexus_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Child'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/nodes/{node_id}/nexuses/{nexus_id}/children/{child_id}':
    get:
      tags:
        - Children
      operationId: get_node_nexus_child
      parameters:
        - in: path
          name: node_id
          required: true
          schema:
            $ref: '#/components/schemas/NodeId'
        - in: path
          name: nexus_id
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: child_id
          required: true
          schema:
            type: string
            format: url
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Child'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
    put:
      tags:
        - Children
      operationId: put_node_nexus_child
      parameters:
        - in: path
          name: node_id
          required: true
          schema:
            $ref: '#/components/schemas/NodeId'
        - in: path
          name: nexus_id
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: child_id
          required: true
          schema:
            type: string
            format: url
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Child'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
    delete:
      tags:
        - Children
      operationId: del_node_nexus_child
      parameters:
        - in: path
          name: node_id
          required: true
          schema:
            $ref: '#/components/schemas/NodeId'
        - in: path
          name: nexus_id
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: child_id
          required: true
          schema:
            type: string
            format: url
      responses:
        '204':
          description: OK
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/nodes/{node_id}/nexuses/{nexus_id}/share':
    delete:
      tags:
        - Nexuses
      operationId: del_node_nexus_share
      parameters:
        - in: path
          name: node_id
          required: true
          schema:
            $ref: '#/components/schemas/NodeId'
        - in: path
          name: nexus_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: OK
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/nodes/{node_id}/nexuses/{nexus_id}/share/{protocol}':
    put:
      tags:
        - Nexuses
      operationId: put_node_nexus_share
      parameters:
        - in: path
          name: node_id
          required: true
          schema:
            $ref: '#/components/schemas/NodeId'
        - in: path
          name: nexus_id
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: protocol
          required: true
          schema:
            $ref: '#/components/schemas/NexusShareProtocol'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/nodes/{node_id}/pools/{pool_id}':
    get:
      tags:
        - Pools
      operationId: get_node_pool
      parameters:
        - in: path
          name: node_id
          required: true
          schema:
            $ref: '#/components/schemas/NodeId'
        - in: path
          name: pool_id
          required: true
          schema:
            $ref: '#/components/schemas/PoolId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pool'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
    put:
      tags:
        - Pools
      operationId: put_node_pool
      parameters:
        - in: path
          name: node_id
          required: true
          schema:
            $ref: '#/components/schemas/NodeId'
        - in: path
          name: pool_id
          required: true
          schema:
            $ref: '#/components/schemas/PoolId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePoolBody'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pool'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
    delete:
      tags:
        - Pools
      operationId: del_node_pool
      parameters:
        - in: path
          name: node_id
          required: true
          schema:
            $ref: '#/components/schemas/NodeId'
        - in: path
          name: pool_id
          required: true
          schema:
            $ref: '#/components/schemas/PoolId'
      responses:
        '204':
          description: OK
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/nodes/{node_id}/pools/{pool_id}/replicas':
    get:
      tags:
        - Replicas
      operationId: get_node_pool_replicas
      parameters:
        - in: path
          name: node_id
          required: true
          schema:
            $ref: '#/components/schemas/NodeId'
        - in: path
          name: pool_id
          required: true
          schema:
            $ref: '#/components/schemas/PoolId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Replica'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/nodes/{node_id}/pools/{pool_id}/replicas/{replica_id}':
    get:
      tags:
        - Replicas
      operationId: get_node_pool_replica
      parameters:
        - in: path
          name: node_id
          required: true
          schema:
            $ref: '#/components/schemas/NodeId'
        - in: path
          name: pool_id
          required: true
          schema:
            $ref: '#/components/schemas/PoolId'
        - in: path
          name: replica_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Replica'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
    put:
      tags:
        - Replicas
      operationId: put_node_pool_replica
      parameters:
        - in: path
          name: node_id
          required: true
          schema:
            $ref: '#/components/schemas/NodeId'
        - in: path
          name: pool_id
          required: true
          schema:
            $ref: '#/components/schemas/PoolId'
        - in: path
          name: replica_id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateReplicaBody'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Replica'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
    delete:
      tags:
        - Replicas
      operationId: del_node_pool_replica
      parameters:
        - in: path
          name: node_id
          required: true
          schema:
            $ref: '#/components/schemas/NodeId'
        - in: path
          name: pool_id
          required: true
          schema:
            $ref: '#/components/schemas/PoolId'
        - in: path
          name: replica_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: OK
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/nodes/{node_id}/pools/{pool_id}/replicas/{replica_id}/share':
    delete:
      tags:
        - Replicas
      operationId: del_node_pool_replica_share
      parameters:
        - in: path
          name: node_id
          required: true
          schema:
            $ref: '#/components/schemas/NodeId'
        - in: path
          name: pool_id
          required: true
          schema:
            $ref: '#/components/schemas/PoolId'
        - in: path
          name: replica_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: OK
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/nodes/{node_id}/pools/{pool_id}/replicas/{replica_id}/share/nvmf':
    put:
      tags:
        - Replicas
      operationId: put_node_pool_replica_share
      parameters:
        - in: path
          name: node_id
          required: true
          schema:
            $ref: '#/components/schemas/NodeId'
        - in: path
          name: pool_id
          required: true
          schema:
            $ref: '#/components/schemas/PoolId'
        - in: path
          name: replica_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/nodes/{node}/block_devices':
    get:
      tags:
        - BlockDevices
      operationId: get_node_block_devices
      parameters:
        - in: query
          name: all
          description: specifies whether to list all devices or only usable ones
          schema:
            type: boolean
        - in: path
          name: node
          required: true
          schema:
            $ref: '#/components/schemas/NodeId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BlockDevice'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/nodes/{node}/jsongrpc/{method}':
    put:
      tags:
        - JsonGrpc
      operationId: put_node_jsongrpc
      parameters:
        - in: path
          name: node
          required: true
          schema:
            $ref: '#/components/schemas/NodeId'
        - in: path
          name: method
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JsonGeneric'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonGeneric'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  /pools:
    get:
      tags:
        - Pools
      operationId: get_pools
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pool'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/pools/{pool_id}':
    get:
      tags:
        - Pools
      operationId: get_pool
      parameters:
        - in: path
          name: pool_id
          required: true
          schema:
            $ref: '#/components/schemas/PoolId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pool'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
    delete:
      tags:
        - Pools
      operationId: del_pool
      parameters:
        - in: path
          name: pool_id
          required: true
          schema:
            $ref: '#/components/schemas/PoolId'
      responses:
        '204':
          description: OK
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/pools/{pool_id}/replicas/{replica_id}':
    put:
      tags:
        - Replicas
      operationId: put_pool_replica
      parameters:
        - in: path
          name: pool_id
          required: true
          schema:
            $ref: '#/components/schemas/PoolId'
        - in: path
          name: replica_id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateReplicaBody'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Replica'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
    delete:
      tags:
        - Replicas
      operationId: del_pool_replica
      parameters:
        - in: path
          name: pool_id
          required: true
          schema:
            $ref: '#/components/schemas/PoolId'
        - in: path
          name: replica_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: OK
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/pools/{pool_id}/replicas/{replica_id}/share':
    delete:
      tags:
        - Replicas
      operationId: del_pool_replica_share
      parameters:
        - in: path
          name: pool_id
          required: true
          schema:
            $ref: '#/components/schemas/PoolId'
        - in: path
          name: replica_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: OK
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/pools/{pool_id}/replicas/{replica_id}/share/nvmf':
    put:
      tags:
        - Replicas
      operationId: put_pool_replica_share
      parameters:
        - in: path
          name: pool_id
          required: true
          schema:
            $ref: '#/components/schemas/PoolId'
        - in: path
          name: replica_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  /replicas:
    get:
      tags:
        - Replicas
      operationId: get_replicas
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Replica'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/replicas/{id}':
    get:
      tags:
        - Replicas
      operationId: get_replica
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Replica'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  /specs:
    get:
      tags:
        - Specs
      operationId: get_specs
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Specs'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  /volumes:
    get:
      tags:
        - Volumes
      operationId: get_volumes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Volume'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/volumes/{volume_id}':
    get:
      tags:
        - Volumes
      operationId: get_volume
      parameters:
        - in: path
          name: volume_id
          required: true
          schema:
            $ref: '#/components/schemas/VolumeId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Volume'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
    put:
      tags:
        - Volumes
      operationId: put_volume
      parameters:
        - in: path
          name: volume_id
          required: true
          schema:
            $ref: '#/components/schemas/VolumeId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVolumeBody'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Volume'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
    delete:
      tags:
        - Volumes
      operationId: del_volume
      parameters:
        - in: path
          name: volume_id
          required: true
          schema:
            $ref: '#/components/schemas/VolumeId'
      responses:
        '204':
          description: OK
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/volumes/{volume_id}/replica_count/{replica_count}':
    put:
      tags:
        - Volumes
      operationId: put_volume_replica_count
      parameters:
        - in: path
          name: volume_id
          required: true
          schema:
            $ref: '#/components/schemas/VolumeId'
        - in: path
          name: replica_count
          required: true
          schema:
            type: integer
            format: uint8
            minimum: 1
            maximum: 255
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Volume'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/volumes/{volume_id}/target':
    put:
      tags:
        - Volumes
      operationId: put_volume_target
      description: |-
        Create a volume target connectable for front-end IO from the specified node.
        Due to a limitation, this must currently be a mayastor storage node.
      parameters:
        - in: path
          name: volume_id
          required: true
          schema:
            $ref: '#/components/schemas/VolumeId'
        - in: query
          description: |-
            The node where the front-end workload resides.
            If the workload moves then the volume must be republished.
          name: node
          required: true
          schema:
            $ref: '#/components/schemas/NodeId'
        - in: query
          description: The protocol used to connect to the front-end node.
          name: protocol
          required: true
          schema:
            $ref: '#/components/schemas/VolumeShareProtocol'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Volume'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
    delete:
      tags:
        - Volumes
      operationId: del_volume_target
      parameters:
        - in: path
          name: volume_id
          required: true
          schema:
            $ref: '#/components/schemas/VolumeId'
        - in: query
          name: force
          description: |-
            Force unpublish if the node is not online. This should only be used when it is safe to do so, eg: when the node is not coming back up.
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Volume'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: [ ]
  '/volumes/{volume_id}/share/{protocol}':
    put:
      tags:
        - Volumes
      operationId: put_volume_share
      parameters:
        - in: path
          name: volume_id
          required: true
          schema:
            $ref: '#/components/schemas/VolumeId'
        - in: path
          name: protocol
          required: true
          schema:
            $ref: '#/components/schemas/VolumeShareProtocol'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/volumes{volume_id}/share':
    delete:
      tags:
        - Volumes
      operationId: del_share
      parameters:
        - in: path
          name: volume_id
          required: true
          schema:
            $ref: '#/components/schemas/VolumeId'
      responses:
        '204':
          description: OK
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
  '/watches/volumes/{volume_id}':
    get:
      tags:
        - Watches
      operationId: get_watch_volume
      parameters:
        - in: path
          name: volume_id
          required: true
          schema:
            $ref: '#/components/schemas/VolumeId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RestWatch'
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
    put:
      tags:
        - Watches
      operationId: put_watch_volume
      parameters:
        - in: path
          name: volume_id
          required: true
          schema:
            $ref: '#/components/schemas/VolumeId'
        - in: query
          name: callback
          description: URL callback
          required: true
          schema:
            type: string
            format: uri
      responses:
        '204':
          description: OK
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
    delete:
      tags:
        - Watches
      operationId: del_watch_volume
      parameters:
        - in: path
          name: volume_id
          required: true
          schema:
            $ref: '#/components/schemas/VolumeId'
        - in: query
          name: callback
          description: URL callback
          required: true
          schema:
            type: string
            format: uri
      responses:
        '204':
          description: OK
        '4XX':
          $ref: '#/components/responses/ClientError'
        '5XX':
          $ref: '#/components/responses/ServerError'
      security:
        - JWT: []
components:
  securitySchemes:
    JWT:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    VolumeId:
      example: ec4e66fd-3b33-4439-b504-d49aba53da26
      type: string
      format: uuid
    NodeId:
      description: storage node identifier
      example: mayastor-1
      type: string
    PoolId:
      description: storage pool identifier
      example: pool-1
      type: string
    BlockDevice:
      example:
        available: false
        devlinks:
          - ''
        devmajor: 0
        devminor: 0
        devname: ''
        devpath: ''
        devtype: ''
        filesystem:
          fstype: ''
          label: ''
          mountpoint: ''
          uuid: ''
        model: ''
        partition:
          name: ''
          number: 0
          parent: ''
          scheme: ''
          typeid: ''
          uuid: ''
        size: 0
      description: Block device information
      type: object
      properties:
        available:
          description: |-
            identifies if device is available for use (ie. is not "currently" in
             use)
          type: boolean
        devlinks:
          description: list of udev generated symlinks by which device may be identified
          type: array
          items:
            type: string
        devmajor:
          description: major device number
          type: integer
          format: int32
        devminor:
          description: minor device number
          type: integer
          format: int32
        devname:
          description: entry in /dev associated with device
          type: string
        devpath:
          description: official device path
          type: string
        devtype:
          description: currently "disk" or "partition"
          type: string
        filesystem:
          example:
            fstype: ''
            label: ''
            mountpoint: ''
            uuid: ''
          description: filesystem information in case where a filesystem is present
          type: object
          properties:
            fstype:
              description: 'filesystem type: ext3, ntfs, ...'
              type: string
            label:
              description: volume label
              type: string
            mountpoint:
              description: path where filesystem is currently mounted
              type: string
            uuid:
              description: UUID identifying the volume (filesystem)
              type: string
          required:
            - fstype
            - label
            - mountpoint
            - uuid
        model:
          description: device model - useful for identifying mayastor devices
          type: string
        partition:
          example:
            name: ''
            number: 0
            parent: ''
            scheme: ''
            typeid: ''
            uuid: ''
          description: partition information in case where device represents a partition
          type: object
          properties:
            name:
              description: partition name
              type: string
            number:
              description: partition number
              type: integer
              format: int32
            parent:
              description: devname of parent device to which this partition belongs
              type: string
            scheme:
              description: 'partition scheme: gpt, dos, ...'
              type: string
            typeid:
              description: partition type identifier
              type: string
            uuid:
              description: UUID identifying partition
              type: string
          required:
            - name
            - number
            - parent
            - scheme
            - typeid
            - uuid
        size:
          description: size of device in (512 byte) blocks
          type: integer
          format: int64
      required:
        - available
        - devlinks
        - devmajor
        - devminor
        - devname
        - devpath
        - devtype
        - filesystem
        - model
        - partition
        - size
    ChildState:
      example: Online
      description: State of a Nexus Child
      type: string
      enum:
        - Unknown
        - Online
        - Degraded
        - Faulted
    Child:
      example:
        rebuildProgress: null
        state: Online
        uri: 'nvmf://10.1.0.5:8420/nqn.2019-05.io.openebs:37d83441-e8ef-4e17-a29e-25169d91cb96'
      description: Child information
      type: object
      properties:
        rebuildProgress:
          description: current rebuild progress (%)
          type: integer
          minimum: 0
          maximum: 100
        state:
          description: state of the child
          allOf:
            - $ref: '#/components/schemas/ChildState'
        uri:
          description: uri of the child device
          type: string
      required:
        - state
        - uri
    CreateNexusBody:
      example:
        children:
          - 'nvmf://10.1.0.5:8420/nqn.2019-05.io.openebs:37d83441-e8ef-4e17-a29e-25169d91cb96'
        size: 80241024
      description: Create Nexus Body JSON
      type: object
      properties:
        children:
          description: |-
            replica can be iscsi and nvmf remote targets or a local spdk bdev
             (i.e. bdev:///name-of-the-bdev).

             uris to the targets we connect to
          type: array
          items:
            type: string
        size:
          description: size of the device in bytes
          type: integer
          format: int64
          minimum: 0
      required:
        - children
        - size
    CreatePoolBody:
      example:
        disks:
          - 'malloc:///disk?size_mb=100'
      description: Create Pool Body JSON
      type: object
      properties:
        disks:
          description: disk device paths or URIs to be claimed by the pool
          type: array
          items:
            example: 'malloc:///disk?size_mb=100'
            description: |-
              Pool device URI
               Can be specified in the form of a file path or a URI
               eg: /dev/sda, aio:///dev/sda, malloc:///disk?size_mb=100
            type: string
        labels:
          description: labels to be set on the pools
          type: object
          additionalProperties:
            type: string
      required:
        - disks
    CreateReplicaBody:
      example:
        size: 80241024
        thin: false
      description: Create Replica Body JSON
      type: object
      properties:
        share:
          $ref: '#/components/schemas/ReplicaShareProtocol'
        size:
          description: size of the replica in bytes
          type: integer
          format: int64
          minimum: 0
        thin:
          description: thin provisioning
          type: boolean
      required:
        - size
        - thin
    PoolTopology:
      example:
        explicit: null
        labelled: null
      description: |-
        Used to determine how to place/distribute the data during volume creation and replica replacement.
         If left empty then the control plane will select from all available resources.
      type: object
      properties:
        labelled:
          description: volume pool topology definition through labels
          allOf:
            - $ref: '#/components/schemas/LabelledTopology'
      additionalProperties: false
      oneOf:
        - required:
            - labelled
    ExplicitNodeTopology:
      example:
        allowed_nodes:
          - ''
        preferred_nodes:
          - ''
      description: 'volume topology, explicitly selected'
      type: object
      properties:
        allowed_nodes:
          description: replicas can only be placed on these nodes
          type: array
          items:
            type: string
        preferred_nodes:
          description: preferred nodes to place the replicas
          type: array
          items:
            type: string
      required:
        - allowed_nodes
        - preferred_nodes
    LabelledTopology:
      example:
        exclusion:
          - ''
        inclusion:
          - ''
      description: labelled topology
      type: object
      properties:
        exclusion:
          example: ''
          description: |-
            Excludes resources with the same $label name, eg:
             "Zone" would not allow for resources with the same "Zone" value
             to be used for a certain operation, eg:
             A node with "Zone: A" would not be paired up with a node with "Zone: A",
             but it could be paired up with a node with "Zone: B"
             exclusive label NAME in the form "NAME", and not "NAME: VALUE"
          type: object
          additionalProperties:
            type: string
        inclusion:
          example: ''
          description: |-
            Includes resources with the same $label or $label:$value eg:
             if label is "Zone: A":
             A resource with "Zone: A" would be paired up with a resource with "Zone: A",
             but not with a resource with "Zone: B"
             if label is "Zone":
             A resource with "Zone: A" would be paired up with a resource with "Zone: B",
             but not with a resource with "OtherLabel: B"
             inclusive label key value in the form "NAME: VALUE"
          type: object
          additionalProperties:
            type: string
      required:
        - exclusion
        - inclusion
    Topology:
      description: node and pool topology for volumes
      type: object
      properties:
        node_topology:
          $ref: '#/components/schemas/NodeTopology'
        pool_topology:
          $ref: '#/components/schemas/PoolTopology'
    NodeTopology:
      example:
        explicit: null
        labelled: null
      description: |-
        Used to determine how to place/distribute the data during volume creation and replica replacement.
         If left empty then the control plane will select from all available resources.
      type: object
      properties:
        explicit:
          description: volume topology, explicitly selected
          allOf:
            - $ref: '#/components/schemas/ExplicitNodeTopology'
        labelled:
          description: volume topology definition through labels
          allOf:
            - $ref: '#/components/schemas/LabelledTopology'
      additionalProperties: false
      oneOf:
        - required:
            - explicit
        - required:
            - labelled
    VolumePolicy:
      example:
        self_heal: true
      description: Volume policy used to determine if and how to replace a replica
      type: object
      properties:
        self_heal:
          description: If true the control plane will attempt to heal the volume by itself
          type: boolean
      required:
        - self_heal
    CreateVolumeBody:
      example:
        policy:
          self_heal: true
        replicas: 1
        size: 10485761
        topology: null
      description: Create Volume Body JSON
      type: object
      properties:
        policy:
          $ref: '#/components/schemas/VolumePolicy'
        replicas:
          description: number of storage replicas
          type: integer
          format: uint8
          minimum: 0
          maximum: 255
        size:
          description: size of the volume in bytes
          type: integer
          format: int64
          minimum: 0
        topology:
          $ref: '#/components/schemas/Topology'
        labels:
          description: Optionally used to store custom volume information
          type: object
          additionalProperties:
            type: string
      required:
        - policy
        - replicas
        - size
    JsonGeneric:
      description: 'Generic JSON value eg: { "size": 1024 }'
      type: object
    NexusState:
      description: State of the Nexus
      type: string
      enum:
        - Unknown
        - Online
        - Degraded
        - Faulted
    Nexus:
      example:
        children:
          - rebuildProgress: null
            state: Online
            uri: 'nvmf://10.1.0.5:8420/nqn.2019-05.io.openebs:replica1'
        deviceUri: null
        node: mayastor-1
        rebuilds: 0
        protocol: nvmf
        size: 8024024
        state: Online
        uuid: 514ed1c8-7174-49ac-b9cd-ad44ef670a67
      description: Nexus information
      type: object
      properties:
        children:
          description: Array of Nexus Children
          type: array
          items:
            $ref: '#/components/schemas/Child'
        deviceUri:
          description: |-
            URI of the device for the volume (missing if not published).
             Missing property and empty string are treated the same.
          type: string
        node:
          description: id of the mayastor instance
          type: string
        rebuilds:
          description: total number of rebuild tasks
          type: integer
          format: int32
          minimum: 0
        protocol:
          $ref: '#/components/schemas/Protocol'
        size:
          description: size of the volume in bytes
          type: integer
          format: int64
          minimum: 0
        state:
          $ref: '#/components/schemas/NexusState'
        uuid:
          description: uuid of the nexus
          type: string
          format: uuid
      required:
        - children
        - deviceUri
        - node
        - rebuilds
        - protocol
        - size
        - state
        - uuid
    NodeStatus:
      description: deemed state of the node
      type: string
      enum:
        - Unknown
        - Online
        - Offline
    NodeSpec:
      example:
        grpcEndpoint: '10.1.0.5:10124'
        id: mayastor-1
      description: mayastor storage node information
      type: object
      properties:
        grpcEndpoint:
          description: gRPC endpoint of the mayastor instance
          type: string
        id:
          $ref: '#/components/schemas/NodeId'
      required:
        - grpcEndpoint
        - id
    NodeState:
      example:
        grpcEndpoint: '10.1.0.5:10124'
        id: mayastor-1
        status: Online
      description: mayastor storage node information
      type: object
      properties:
        grpcEndpoint:
          description: gRPC endpoint of the mayastor instance
          type: string
        id:
          $ref: '#/components/schemas/NodeId'
        status:
          $ref: '#/components/schemas/NodeStatus'
      required:
        - grpcEndpoint
        - id
        - status
    Node:
      description: mayastor storage node information
      type: object
      properties:
        id:
          $ref: '#/components/schemas/NodeId'
        spec:
          $ref: '#/components/schemas/NodeSpec'
        state:
          $ref: '#/components/schemas/NodeState'
      required:
        - id
    PoolStatus:
      description: current status of the pool
      type: string
      enum:
        - Unknown
        - Online
        - Degraded
        - Faulted
    Pool:
      description: Pool object, comprised of a spec and a state
      type: object
      properties:
        id:
          $ref: '#/components/schemas/PoolId'
        spec:
          $ref: '#/components/schemas/PoolSpec'
        state:
          $ref: '#/components/schemas/PoolState'
      required:
        - id
      minProperties: 2
    PoolState:
      description: State of a pool, as reported by mayastor
      type: object
      properties:
        capacity:
          description: size of the pool in bytes
          example: 10737418240
          type: integer
          format: int64
          minimum: 0
        disks:
          description: absolute disk paths claimed by the pool
          type: array
          items:
            example: 'aio:///dev/sda?uuid=caede6dd-5732-4771-8cb6-c32315ed28d3'
            description: |-
              Pool device URI
               Can be specified in the form of a file path or a URI
               eg: /dev/sda, aio:///dev/sda, malloc:///disk?size_mb=100
            type: string
        id:
          $ref: '#/components/schemas/PoolId'
        node:
          $ref: '#/components/schemas/NodeId'
        status:
          $ref: '#/components/schemas/PoolStatus'
        used:
          description: used bytes from the pool
          type: integer
          format: int64
          minimum: 0
      required:
        - capacity
        - disks
        - id
        - node
        - status
        - used
    ReplicaState:
      description: state of the replica
      type: string
      enum:
        - Unknown
        - Online
        - Degraded
        - Faulted
    Replica:
      description: Replica information
      type: object
      properties:
        node:
          $ref: '#/components/schemas/NodeId'
        pool:
          $ref: '#/components/schemas/PoolId'
        share:
          $ref: '#/components/schemas/Protocol'
        size:
          description: size of the replica in bytes
          example: 80241024
          type: integer
          format: int64
          minimum: 0
        state:
          $ref: '#/components/schemas/ReplicaState'
        thin:
          description: thin provisioning
          example: false
          type: boolean
        uri:
          description: uri usable by nexus to access it
          example: 'nvmf://10.1.0.5:8420/nqn.2019-05.io.openebs:fb04022b-1ca1-4789-bcd4-dacbcb54e23c'
          type: string
        uuid:
          description: uuid of the replica
          type: string
          format: uuid
      required:
        - node
        - pool
        - share
        - size
        - state
        - thin
        - uri
        - uuid
    RestJsonError:
      example:
        details: The Pool 'pooloop' was not found
        kind: NotFound
      description: Rest Json Error format
      type: object
      properties:
        details:
          description: detailed error information
          type: string
        kind:
          description: error kind
          type: string
          enum:
            - Timeout
            - Deserialize
            - Internal
            - InvalidArgument
            - DeadlineExceeded
            - NotFound
            - AlreadyExists
            - PermissionDenied
            - ResourceExhausted
            - FailedPrecondition
            - NotShared
            - NotPublished
            - AlreadyPublished
            - AlreadyShared
            - Aborted
            - OutOfRange
            - Unimplemented
            - Unavailable
            - Unauthenticated
            - Unauthorized
            - Conflict
            - FailedPersist
            - Deleting
            - InUse
      required:
        - details
        - kind
    RestWatch:
      example:
        callback: 'https://api.myserver.com/volume/e2fc5ce8-a56e-47a1-94e9-04dd2f73b88f/callback'
        resource: e2fc5ce8-a56e-47a1-94e9-04dd2f73b88f
      description: Watch Resource in the store
      type: object
      properties:
        callback:
          description: callback used to notify the watcher of a change
          type: string
        resource:
          description: id of the resource to watch on
          type: string
      required:
        - callback
        - resource
    Specs:
      description: Specs detailing the requested configuration of the objects.
      type: object
      properties:
        nexuses:
          description: Nexus Specs
          type: array
          items:
            $ref: '#/components/schemas/NexusSpec'
        pools:
          description: Pool Specs
          type: array
          items:
            $ref: '#/components/schemas/PoolSpec'
        replicas:
          description: Replica Specs
          type: array
          items:
            $ref: '#/components/schemas/ReplicaSpec'
        volumes:
          description: Volume Specs
          type: array
          items:
            $ref: '#/components/schemas/VolumeSpec'
      required:
        - nexuses
        - pools
        - replicas
        - volumes
    NexusSpec:
      example:
        children:
          - 'nvmf://10.1.0.5:8420/nqn.2019-05.io.openebs:37d83441-e8ef-4e17-a29e-25169d91cb96'
        managed: false
        node: mayastor-1
        operation: null
        owner: null
        share: none
        size: 80241024
        state: Created
        uuid: 514ed1c8-7174-49ac-b9cd-ad44ef670a67
      description: User specification of a nexus.
      type: object
      properties:
        children:
          description: List of children.
          type: array
          items:
            type: string
        managed:
          description: Managed by our control plane
          type: boolean
        node:
          description: Node where the nexus should live.
          type: string
        operation:
          example:
            operation: Create
            result: null
          description: Record of the operation in progress
          type: object
          properties:
            operation:
              description: Record of the operation
              type: string
              enum:
                - Create
                - Destroy
                - Share
                - Unshare
                - AddChild
                - RemoveChild
            result:
              description: Result of the operation
              type: boolean
          required:
            - operation
        owner:
          description: 'Volume which owns this nexus, if any'
          type: string
          format: uuid
        share:
          $ref: '#/components/schemas/Protocol'
        size:
          description: Size of the nexus.
          type: integer
          format: int64
          minimum: 0
        status:
          $ref: '#/components/schemas/SpecStatus'
        uuid:
          description: Nexus Id
          type: string
          format: uuid
      required:
        - children
        - managed
        - node
        - share
        - size
        - status
        - uuid
    PoolSpec:
      description: User specification of a pool.
      type: object
      properties:
        disks:
          description: absolute disk paths claimed by the pool
          type: array
          items:
            example: '/dev/sda'
            description: |-
              Pool device URI
               Can be specified in the form of a file path or a URI
               eg: /dev/sda, aio:///dev/sda, malloc:///disk?size_mb=100
            type: string
        id:
          $ref: '#/components/schemas/PoolId'
        labels:
          description: labels to be set on the pools
          type: object
          additionalProperties:
            type: string
        node:
          $ref: '#/components/schemas/NodeId'
        status:
          $ref: '#/components/schemas/SpecStatus'
      required:
        - disks
        - id
        - node
        - status
    ReplicaSpec:
      example:
        managed: false
        operation: null
        owners:
          nexuses:
            - 514ed1c8-7174-49ac-b9cd-ad44ef670a67
          volume: null
        pool: pooloop
        share: none
        size: 80241024
        state: Created
        thin: false
        uuid: 37d83441-e8ef-4e17-a29e-25169d91cb96
      description: User specification of a replica.
      type: object
      properties:
        managed:
          description: Managed by our control plane
          type: boolean
        operation:
          example:
            operation: Create
            result: null
          description: Record of the operation in progress
          type: object
          properties:
            operation:
              description: Record of the operation
              type: string
              enum:
                - Create
                - Destroy
                - Share
                - Unshare
            result:
              description: Result of the operation
              type: boolean
          required:
            - operation
        owners:
          example:
            nexuses:
              - 514ed1c8-7174-49ac-b9cd-ad44ef670a67
            volume: null
          description: Owner Resource
          type: object
          properties:
            nexuses:
              type: array
              items:
                type: string
                format: uuid
            volume:
              type: string
              format: uuid
          required:
            - nexuses
        pool:
          description: The pool that the replica should live on.
          type: string
        share:
          $ref: '#/components/schemas/Protocol'
        size:
          description: The size that the replica should be.
          type: integer
          format: int64
          minimum: 0
        status:
          $ref: '#/components/schemas/SpecStatus'
        thin:
          description: Thin provisioning.
          type: boolean
        uuid:
          description: uuid of the replica
          type: string
          format: uuid
      required:
        - managed
        - owners
        - pool
        - share
        - size
        - status
        - thin
        - uuid
    VolumeSpec:
      example:
        num_replicas: 2
        size: 80241024
        state: Created
        target_node: mayastor-1
        uuid: 514ed1c8-7174-49ac-b9cd-ad44ef670a67
      description: User specification of a volume.
      type: object
      properties:
        labels:
          description: Optionally used to store custom volume information
          type: object
          additionalProperties:
            type: string
        num_replicas:
          description: Number of children the volume should have.
          type: integer
          format: uint8
          minimum: 0
          maximum: 255
        operation:
          example:
            operation: Create
            result: null
          description: Record of the operation in progress
          type: object
          properties:
            operation:
              description: Record of the operation
              type: string
              enum:
                - Create
                - Destroy
                - Share
                - Unshare
                - SetReplica
                - RemoveUnusedReplica
                - Publish
                - Unpublish
            result:
              description: Result of the operation
              type: boolean
          required:
            - operation
        size:
          description: Size that the volume should be.
          type: integer
          format: int64
          minimum: 0
        status:
          $ref: '#/components/schemas/SpecStatus'
        target:
          $ref: '#/components/schemas/VolumeTarget'
        uuid:
          description: Volume Id
          type: string
          format: uuid
        topology:
          $ref: '#/components/schemas/Topology'
        policy:
          $ref: '#/components/schemas/VolumePolicy'
      required:
        - num_paths
        - num_replicas
        - protocol
        - size
        - status
        - uuid
        - policy
    VolumeTarget:
      example:
        node: mayastor-1
        protocol: nvmf
      description: Specification of a volume target
      type: object
      properties:
        node:
          description: The node where front-end IO will be sent to
          type: string
        protocol:
          $ref: '#/components/schemas/VolumeShareProtocol'
      required:
        - node
    SpecStatus:
      description: Common base state for a resource
      type: string
      enum:
        - Creating
        - Created
        - Deleting
        - Deleted
    VolumeStatus:
      description: current volume status
      type: string
      enum:
        - Unknown
        - Online
        - Degraded
        - Faulted
    VolumeShareProtocol:
      description: Volume Share Protocol
      type: string
      enum:
        - nvmf
        - iscsi
    NexusShareProtocol:
      description: Nexus Share Protocol
      type: string
      enum:
        - nvmf
        - iscsi
    ReplicaShareProtocol:
      description: Replica Share Protocol
      type: string
      enum:
        - nvmf
    Protocol:
      description: Common Protocol
      type: string
      enum:
        - none
        - nvmf
        - iscsi
        - nbd
    WatchCallback:
      description: Watch Callbacks
      type: object
      properties:
        uri:
          type: string
      additionalProperties: false
      oneOf:
        - required:
            - uri
    VolumeState:
      example:
        target:
          children:
            - rebuildProgress: null
              state: Online
              uri: 'nvmf://10.1.0.6:8420/nqn.2019-05.io.openebs:a76adcd6-9df0-47a1-90a5-2d5bf4151572'
          deviceUri: 'nvmf://10.1.0.5:8420/nqn.2019-05.io.openebs:nexus-a76adcd6-9df0-47a1-90a5-2d5bf4151573'
          protocol: nvmf
          node: mayastor-1
          rebuilds: 0
          share: none
          size: 80241024
          state: Online
          uuid: 61d6afc8-15c6-4127-b0aa-15a570198880
        size: 80241024
        status: Online
        uuid: 4be37dbd-4b60-44f3-b807-08f6693522ac
        replica_topology:
          03f0c3f1-4d3e-44e5-b768-4c50e53f7a34:
            node: mayastor-1
            pool: pool-1
            state: Online
      description: Runtime state of the volume
      type: object
      properties:
        target:
          description: target exposed via a Nexus
          allOf:
            - $ref: '#/components/schemas/Nexus'
        size:
          description: size of the volume in bytes
          type: integer
          format: int64
          minimum: 0
        status:
          $ref: '#/components/schemas/VolumeStatus'
        uuid:
          description: name of the volume
          type: string
          format: uuid
        replica_topology:
          description: replica location information
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ReplicaTopology'
      required:
        - size
        - uuid
        - status
        - replica_topology
    Volume:
      description: |-
        Volumes
        Volume information
      type: object
      properties:
        spec:
          $ref: '#/components/schemas/VolumeSpec'
        state:
          $ref: '#/components/schemas/VolumeState'
      required:
        - spec
        - state
    ReplicaTopology:
      description: Location of replicas (nodes and pools)
      type: object
      properties:
        node:
          $ref: '#/components/schemas/NodeId'
        pool:
          $ref: '#/components/schemas/PoolId'
        state:
          $ref: '#/components/schemas/ReplicaState'
      required:
        - state
  responses:
    ClientError:
      description: Client side error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RestJsonError'
    ServerError:
      description: Server side error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RestJsonError'